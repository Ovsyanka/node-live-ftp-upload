Задачи:
 ☐ Описать в changelog отличия (конфига) от изначальной версии
   переименования
     "dir" -> "localDir"
     "connect" -> "ftpSettings"
   новые настройки
     "exclude"
   Новый механизм запуска, вместо передачи конфига в require - он передается в start, а так же передается коллбэк.
 ☐ Описать недостатки старой версии (преимущества новой)
   8 module.exports = function(opts, cb) - коллбэк принимается, но нигде не вызывается. По сути эта функция асинхронная, но используется как синхронная. console.log('FTP uploader is watching...'); из примера выполнится фактически раньше, чем запустится синхронизация и вне зависимости от ее успешности.
   * Отсутствие фильтрации

 ☐ Написать readme на русском
 ☐ Перевести readme на английский
 ☐ Написать, что требования к версиям библиотек и node выставлены по моему текущему окружению и модуль может работыть и на бболее старых версиях скорее всего

Файлы проекта:
  index.js - основной код скрипта
  test.js - код для тестирования всякого, он пушится только в dev ветку и не должен содержать никаких паролей.
  conf.js - конфиг для тестирования. Не пушится.

Заметки:
  * Я решил, что буду писать собственный скрипт как замену его скрипту. То есть он на данный момент должен не сильно отличаться в плане использования, мне это нужно описать и предложить ему использовать мой код, вместо его, так как название для скрипта хорошее и мой будет выполнять то же самое, только лучше.
  Если что-то не получится, тогда можно избавиться от его кода в истории, поменять название и сделать отдельный репозиторий.
  Теперь я передумал =) Решил сделать собственный репозиторий, а Адаму написать потом, не против ли он сослаться на мою версию и чтобы я использовал то же имя. Если он против - ну и ладно, переименую кака-нибудь.
  * start - конфиг не обязательный параметр, если не передан используется тот, что уже есть.
  * pause - синхронизация приостанавливается, хотя отслеживание продолжается и соединение с фтп не рвётся. для случаев, когда делаются временные изменения, тем более если они масштабные. можно в концов сделать параметр, который будет включать автоматическое таланте синхронизации при каких либо условиях. 
  * resume
  * Писать структуру модуля согласно этой статье http://caolanmcmahon.com/posts/nodejs_style_and_structure/
  * Оформление package.json:
    http://browsenpm.org/package.json
    https://www.npmjs.org/doc/files/package.json.html
  * В кач-ве чексумм я решил использовать CRC(32), а потом можно и опцию добавить, что использовать (md5, sha1). Преимущество его в том, что он более быстрый по идее (но не так, чтобы очень сильно... Кто-то тестил - на треть быстрее, у кого-то, в четыре раза... Но не на порядок.) и в том, что занимает меньше места. Недостаток в том, что возможны коллизии, но мне уникальность не нужна.
  * Считать чексуммы на фтп нельзя. Как вариант, можно добавить опцию по хранению этих чексумм прямо на фтп... только есть ли в этом смысл? Надо обдумать. Загружать их туда самому придется. Наверное, лучше организовать их хранение локально. Хэши файлов должны обновляться при успешной записи этих файлов на фтп и при чтении этих файлов оттуда.
  * Хранить чексуммы я предполагаю в объекте, ключами которого будут пути. Не знаю пока, вложенный объект использовать или flatten.
  * dependencies и engines заполняю примерно текущими значениями. Надо будет потом как-нибудь сделать автоматические тесты и прогнать на разных версиях node и модулей.